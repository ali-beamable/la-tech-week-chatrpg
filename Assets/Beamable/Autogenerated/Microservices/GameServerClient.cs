//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.GameServer"/> </summary
    public sealed class GameServerClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public GameServerClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "GameServer";
            }
        }
        
        /// <summary>
        /// Call the NewCharacter method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.NewCharacter"/>
        /// </summary>
        public Beamable.Common.Promise<CharacterView> NewCharacter(string card1, string card2, string card3)
        {
            object raw_card1 = card1;
            object raw_card2 = card2;
            object raw_card3 = card3;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("card1", raw_card1);
            serializedFields.Add("card2", raw_card2);
            serializedFields.Add("card3", raw_card3);
            return this.Request<CharacterView>("GameServer", "character/new", serializedFields);
        }
        
        /// <summary>
        /// Call the GetCharacter method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.GetCharacter"/>
        /// </summary>
        public Beamable.Common.Promise<CharacterView> GetCharacter()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<CharacterView>("GameServer", "character/get", serializedFields);
        }
        
        /// <summary>
        /// Call the Ready method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.Ready"/>
        /// </summary>
        public Beamable.Common.Promise<WorldState> Ready()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<WorldState>("GameServer", "adventure/ready", serializedFields);
        }
        
        /// <summary>
        /// Call the Play method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.Play"/>
        /// </summary>
        public Beamable.Common.Promise<WorldState> Play(AdventurePlayRequest request)
        {
            object raw_request = request;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("request", raw_request);
            return this.Request<WorldState>("GameServer", "adventure/play", serializedFields);
        }
        
        /// <summary>
        /// Call the TestClaude method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestClaude"/>
        /// </summary>
        public Beamable.Common.Promise<string> TestClaude(string prompt)
        {
            object raw_prompt = prompt;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("prompt", raw_prompt);
            return this.Request<string>("GameServer", "claude", serializedFields);
        }
        
        /// <summary>
        /// Call the TestScenario method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestScenario"/>
        /// </summary>
        public Beamable.Common.Promise<string> TestScenario(string prompt)
        {
            object raw_prompt = prompt;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("prompt", raw_prompt);
            return this.Request<string>("GameServer", "scenario", serializedFields);
        }
        
        /// <summary>
        /// Call the TestBlockade method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestBlockade"/>
        /// </summary>
        public Beamable.Common.Promise<string> TestBlockade(string prompt)
        {
            object raw_prompt = prompt;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("prompt", raw_prompt);
            return this.Request<string>("GameServer", "blockade", serializedFields);
        }
        
        /// <summary>
        /// Call the TestScheduler method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestScheduler"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Scheduler.Job> TestScheduler()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<Beamable.Common.Scheduler.Job>("GameServer", "TestScheduler", serializedFields);
        }
        
        /// <summary>
        /// Call the DelayedTask method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.DelayedTask"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> DelayedTask()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<System.Threading.Tasks.Task>("GameServer", "DelayedTask", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersGameServerClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterAdventurePlayRequest : MicroserviceClientDataWrapper<AdventurePlayRequest>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForGameServerClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<GameServerClient>();
        }
        
        public static GameServerClient GameServer(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<GameServerClient>();
        }
    }
}
