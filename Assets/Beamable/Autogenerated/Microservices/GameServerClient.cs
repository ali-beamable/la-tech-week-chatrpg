//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.GameServer"/> </summary
    public sealed class GameServerClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public GameServerClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "GameServer";
            }
        }
        
        /// <summary>
        /// Call the TestClaude method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestClaude"/>
        /// </summary>
        public Beamable.Common.Promise<string> TestClaude(string prompt)
        {
            string serialized_prompt = this.SerializeArgument<string>(prompt);
            string[] serializedFields = new string[] {
                    serialized_prompt};
            return this.Request<string>("GameServer", "claude", serializedFields);
        }
        
        /// <summary>
        /// Call the TestScenario method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestScenario"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> TestScenario(string prompt)
        {
            string serialized_prompt = this.SerializeArgument<string>(prompt);
            string[] serializedFields = new string[] {
                    serialized_prompt};
            return this.Request<Beamable.Common.Unit>("GameServer", "scenario", serializedFields);
        }
        
        /// <summary>
        /// Call the TestBlockade method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.TestBlockade"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> TestBlockade(string prompt)
        {
            string serialized_prompt = this.SerializeArgument<string>(prompt);
            string[] serializedFields = new string[] {
                    serialized_prompt};
            return this.Request<Beamable.Common.Unit>("GameServer", "blockade", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersGameServerClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForGameServerClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<GameServerClient>();
        }
        
        public static GameServerClient GameServer(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<GameServerClient>();
        }
    }
}
